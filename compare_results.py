import argparse
import os
import re

import sys

"""
This script allows us to compare the results to the original input
for each line in the output file, the script calculates the most similar example in the original input
and the similarity score for this line.
Then, the average score is printed
"""

def compare_strings(s1, s2):
	"""
	The lower the result is the better the strings match
	The result is on a scale of 0 to 1
	"""
	s1 = clean(s1)
	s2 = clean(s2)

	s1 = s1.split(' ')
	s2 = s2.split(' ')

	diff = 0

	min_length = min(len(s1), len(s2))

	for _ ,w1 in zip(xrange(min_length),s1):
		if w1 not in s2:
			diff += 1

	for _ ,w2 in zip(xrange(min_length),s2):
		if w2 not in s1:
			diff += 1

	combined_length = len(s1) + len(s2)

	len_diff = float(abs(len(s1) - len(s2))) / combined_length

	words_diff = float(diff) / (2 * min_length)
	return 0.9 * words_diff + 0.1 * len_diff


def clean(s):
	"""
	remove symbols and lowercase
	"""
	regex = re.compile('\W+')
	s = regex.sub(' ', s).strip()
	return s.lower()


def test():
	assert compare_strings('Hello my name is aaaa','hello my name is') == 0
	assert compare_strings('hello my name is','hello my name') == 0
	assert compare_strings('hello my name','hello my is') == 1.0 / 3
	assert compare_strings('aaa bbb','ccc ddd') == 1

def check_args(args, parser):
	if not os.path.isfile(args.input_file):
		parser.error('input file {} does not exist'.format(args.input_file))
	if not os.path.isfile(args.output_file):
		parser.error('output file {} does not exist'.format(args.output_file))


def line_len_diff(s1, s2):
	s1_len = len(s1.split())
	s2_len = len(s2.split())
	return float(abs(s1_len - s2_len)) / (s1_len + s2_len)


def find_best_match(line, input_file):
	"""
	:return: (score,string)
	"""
	minimum = (sys.maxint, '')
	for in_line in input_file:
		if line_len_diff(line, in_line) > 0.5:
			# skip if line length diff is to big
			continue
		score = compare_strings(line, in_line)
		if score < minimum[0]:
			minimum = score, in_line
	return minimum[0]


def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('--input_file', type=str, required=True, help='The original input file on which the model was trained')
	parser.add_argument('--output_file', type=str, required=True, help='An output file generated by the model')

	args = parser.parse_args()
	check_args(args, parser)

	input_file_path = args.input_file
	output_file_path = args.output_file

	sum = 0
	count = 0

	with open(output_file_path) as output_file:
		with open(input_file_path) as input_file:
			for line in output_file:
				match_score = find_best_match(line, input_file)
				sum += match_score
				count += 1
				input_file.seek(0)

	print '\n----------------------------------------------' \
		  '\nAverage score is {} from range [0,1]' \
		  '\nLower is better' \
		  '\n----------------------------------------------'.format(sum / count)


if __name__ == '__main__':
	main()